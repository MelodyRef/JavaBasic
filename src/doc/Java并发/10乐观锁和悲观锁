### 10.1乐观锁和悲观锁

##### 概念

###### 悲观锁：就是我们常说的锁。对于悲观锁来说，它总是认为每次访问共享资源时会发生冲突，所以必须对每次操作加上锁，以保证临界区的程序同一时间只能由一个线程执行

###### 乐观锁：乐观锁又被称为“无锁”。乐观锁总是假设对共享资源的访问没有冲突，线程可以不停的执行，无需加锁也无需等待。而一旦多个线程发生冲突，乐观锁通常是使用CAS来保证线程执行的安全性

**无锁操作中没有锁的存在，乐观锁天生免疫死锁**

乐观锁用于读多写少的情况，避免频繁加锁影响性能；悲观锁用于写多读少情况，避免频繁失败和重试影响性能



### 10.2CAS

CAS全称：比较并交换（Compare And Swap)，在CAS中，有三个值

- V:要更新的变量(var)
- E:预期值(expected)
- N:新值(new)

过程如下：

判断V是否等于E，如果等于，将V的值设置为N，如果不等，说明有其他线程更改了V的值，则当前线程放弃更新，什么都不做

所以这里的**预期值E本质上等于旧值**

**CAS是一种原子操作**，是一条系统原语，是一条CPU的原子指令，从**CPU层面保证了它的原子性**



**当多个线程同时使用CAS操作一个变量时，只有一个会胜出并成功更新，其他的都会失败，但失败的线程不会被挂起，仅是被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作**



### 10.3Java实现CAS的原理-Unsafe类



Java中，有一个Unsafe类，在**sun.misc**包中，里面是一些native方法，其中有几个关于CAS的

```java
boolean compareAndSwapObject(Object o,long offset,Object expect,Object x);
boolean compareAndSwapInt(Object o,long offset,int expect,int x);
boolean compareAndSwapLong(Object o,long offset,long expect,long x);

//offset代表字段相对于对象起始地址的偏移量

 public final int getAndSetInt(Object o, long offset, int delta) {
        int v;
        do {
            v = this.getIntVolatile(o, offset);
        } while(!this.compareAndSwapInt(o, offset, v, v+delta));

        return var5;
    }

//使用do-while循环确保循环体至少执行一次，确保返回值是字段初始值
```

Unsafe中对CAS的实现用C++写的，具体实现和操作系统，CPU都有关系

Unsafe还有其他用途，比如支持线程挂起和回复的park和unpark



### 10.4原子操作-AtomicInteger类

- 原子更新基本类型
- 原子更新引用
- 原子更新数组
- 原子更新字段（属性）



### 10.5CAS实现原子操作的三大问题



#### 10.5.1ABA问题

ABA问题：一个值原来是A，变成了B，又变回了A。这个时候使用CAS是检查不出的，但是值实际已经变了两次



ABA问题的解决思路是在变量前面追加**版本号或者时间戳**，JDK的atomic包中**AtomicStampedReference**可以解决ABA问题（通过检查引用和时间标志）



#### 10.5.2循环时间长开销大

CAS多于自旋结合。如果自旋长时间不成功，则会占用大量CPU资源

解决思路是JVM支持处理器提供的**pause指令**

pause指令能让自旋失败是CPU睡眠一小段时间再开始继续自旋，从而使得读频率低很多，为解决内存顺序冲突导致的CPU流水线重排的代价也会小很多



#### 10.5.3只能保证一个共享变量的原子操作

两种解决方案

1. 使用AtomicReference类保证对象之间的原子性，把多个变量放到一个对象里面进行CAS操作
2. 使用锁，锁内的临界区代码能保证只有当前线程操作







